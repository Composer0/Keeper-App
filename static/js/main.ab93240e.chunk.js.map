{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","href","target","rel","Note","props","className","title","content","onClick","onChecked","id","CreateArea","useState","isExpanded","setExpanded","note","setNote","handleChange","event","name","value","prevNote","note_serialized","JSON","stringify","note_deSerialized","parse","localStorage","getItem","setItem","removeItem","required","placeholder","type","onChange","rows","Zoom","in","Fab","onAdd","preventDefault","notesText","document","querySelectorAll","notes","forEach","push","updateLS","console","log","App","message","setMessage","deleteNote","filter","index","prevValues","map","keeperMessages","key","ReactDOM","render","getElementById"],"mappings":"+NAYeA,MARf,WACE,OACE,gCACE,4BAAI,kBAAC,IAAD,MAAJ,qBAAuC,kBAAC,IAAD,SCK9BC,MAVf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,gCACA,iDAAsB,8BAAM,uBAAGC,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAzD,gBAAN,OAA0GL,M,iBCarHM,MAhBf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BAAQC,QAAS,WACfJ,EAAMK,UAAUL,EAAMM,MAIxB,kBAAC,IAAD,S,iDCgHSC,MAtHf,SAAoBP,GAElB,MAAkCQ,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KAGA,EAAuBF,mBAAS,CAC9BN,MAAO,GACPC,QAAS,KAFX,mBAAMQ,EAAN,KAAYC,EAAZ,KAMA,SAASC,EAAaC,GACpB,MAAsBA,EAAMjB,OAArBkB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAEbJ,GAAQ,SAAAK,GACN,OAAO,2BACFA,GADL,kBAEGF,EAAOC,OAQhB,IAAIE,EAAkBC,KAAKC,UAAUT,GACjCU,EAAoBF,KAAKG,MAAMC,aAAaC,QAAQ,SA+CtD,OA9CFD,aAAaE,QAAQ,OAAQP,GAC7BK,aAAaC,QAAQ,QACrBD,aAAaG,WAAW,QA6CpB,6BACE,0BAAMzB,UAAU,eAIfQ,GACE,2BACCM,KAAK,QACLY,UAAQ,EACRC,YAAY,QACZC,KAAK,QACLb,MAAOL,EAAKT,MACZ4B,SAAUjB,IAKZ,8BACEE,KAAK,UACLX,QAxBR,WACEM,GAAY,IAwBNiB,UAAQ,EACRC,YAAY,iBACZC,KAAK,UACLE,KAAMtB,EAAa,EAAI,EACvBO,MAAOL,EAAKR,QACZ2B,SAAUjB,IAKd,kBAACmB,EAAA,EAAD,CAAMC,GAAIxB,GACR,kBAACyB,EAAA,EAAD,CACE9B,QA1DV,SAAoBU,GAClBd,EAAMmC,MAAMxB,GACZG,EAAMsB,iBACNxB,EAAQ,CACNV,MAAO,GACPC,QAAS,KAjBb,WACE,IAAMkC,EAAYC,SAASC,iBAAiB,eAEtCC,EAAQ,GAEdH,EAAUI,SAAQ,SAAA9B,GAAI,OAAI6B,EAAME,KAAK/B,EAAKK,UAG1CO,aAAaE,QAAQ,QAASN,KAAKC,UAAUoB,IAU3CG,GACAC,QAAQC,IAAI3B,GACZ0B,QAAQC,IAAIxB,KAmDL,kBAAC,IAAD,WC5DIyB,MA7Cf,WAEE,MAA6BtC,mBAAS,IAAtC,mBAAMuC,EAAN,KAAeC,EAAf,KAUA,SAASC,EAAW3C,GAClB0C,GAAW,SAAC/B,GACV,OAAOA,EAASiC,QAAO,SAACH,EAASI,GAC/B,OAAOA,IAAU7C,QAQvB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE6B,MAtBN,SAAiBxB,GAEfqC,GAAW,SAAAI,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAuBzC,UAqBvB,4BACGoC,EAAQM,KAAI,SAACC,EAAgBH,GAAjB,OACf,kBAAC,EAAD,CACEI,IAAKJ,EACL7C,GAAI6C,EACJjD,MAAOoD,EAAepD,MACtBC,QAASmD,EAAenD,QACxBE,UAAW4C,QAIb,kBAAC,EAAD,QC7CNO,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASoB,eAAe,W","file":"static/js/main.ab93240e.chunk.js","sourcesContent":["import React from \"react\";\nimport HighlightIcon from '@material-ui/icons/Highlight';\n\n\nfunction Header() {\n  return (\n    <header>\n      <h1><HighlightIcon />Orion's Keeper App<HighlightIcon /></h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n    <p>Brought to life by <span><a href=\"http://www.orionpalmer.com\" target=\"_blank\" rel=\"noopener noreferrer\">Orion Palmer</a> in {year}</span>\n    </p>\n  </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction Note(props) {\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button onClick={() => {\n        props.onChecked(props.id)\n      }}>\n\n        {/* Delete */}\n      <DeleteIcon />\n      </button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, {useState} from \"react\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from '@material-ui/core/Zoom';\n\n\n\nfunction CreateArea(props) {\n\n  const [isExpanded, setExpanded] = useState(false);\n  // const[titleText, setTitleText] = useState(\"\");\n  // const[contentText, setContentText] = useState(\"\");\n  const[note, setNote] = useState({\n    title: '',\n    content: ''\n  })\n\n  //Allows Text to be typed into the Title and content areas for the New Note.\n  function handleChange(event) {\n    const {name, value} = event.target\n\n    setNote(prevNote => {\n      return {\n        ...prevNote,\n        [name]: value\n      }\n    })\n  }\n  //Having handle change read the name and register value was great. Still trying to wrap my head around what exactly is happening with this bit of code but I will continue to review it for future projects. There are several problems out there that will require this solution. I can easily see that.\n// this set up allows for the object being typed into, to be correctly identified which will lead to the screen produce the correct input effect based on the input/textarea being used.\n\n  \nlet note_serialized = JSON.stringify(note);\nlet note_deSerialized = JSON.parse(localStorage.getItem('note'));\nlocalStorage.setItem(\"note\", note_serialized)\nlocalStorage.getItem('name')\nlocalStorage.removeItem('name')\n\n\n// Only strings can be stored into local storage.\n\n\n// Updates Local Storage actively through each keytype.\nfunction updateLS() {\n  const notesText = document.querySelectorAll('create-note')\n  \n  const notes = []\n  \n  notesText.forEach(note => notes.push(note.value))\n  \n  // store into local Storage\n  localStorage.setItem('notes', JSON.stringify(notes))\n}\n\n\nfunction submitNote(event) {\n  props.onAdd(note);\n  event.preventDefault();\n  setNote({\n    title: \"\",\n    content: \"\"});\n    updateLS();\n    console.log(note_serialized)\n    console.log(note_deSerialized)\n  }\n  //  Original idea was to create 2 separate handle and const. I learned that you can create an object through the useState. That changes things immensely.\n  // function handleTitleChange(event) {\n    //   const newTitleValue = event.target.value;\n  //   setNote.title(newTitleValue);\n  // }\n  \n  // function handleContentChange(event) {\n  //   const newContentValue = event.target.value;\n  //   setNote.content(newContentValue);\n  // }\n    //Allows Text to be typed into the Title and content areas for the New Note.\n  function expand() {\n    setExpanded(true);\n  }\n\n  return (\n    <div>\n      <form className=\"create-note\">\n      {/* //note container */}\n\n{/* create a class to hide input */}\n      {isExpanded && \n        (<input \n          name=\"title\" \n          required\n          placeholder=\"Title\" \n          type=\"title\"\n          value={note.title} \n          onChange={handleChange}\n        /> \n      )}\n{/* create boolean using in to render input upon textarea focus. On focus have textarea increase from 1 to 3 rows. */}\n\n        <textarea \n          name=\"content\" \n          onClick={expand}\n          required\n          placeholder=\"Take a note...\" \n          type=\"content\"\n          rows={isExpanded ? 3 : 1 }\n          value={note.content}\n          onChange={handleChange}\n        />\n      {/* //note container */}\n\n      {/* //button for note */}\n      <Zoom in={isExpanded}>\n        <Fab\n          onClick={submitNote}\n          ><AddCircleIcon />\n          </Fab>\n      </Zoom>\n        \n      {/* //button for note */}\n\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import React, {useState} from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n// import { AccessAlarm, ThreeDRotation } from '@mui/icons-material';\n\n\n\nfunction App() {\n\n  const[message, setMessage] = useState([]);\n\n\n  function addNote(note) {\n\n    setMessage(prevValues => {\n      return [...prevValues, note];\n    })\n  }\n\n  function deleteNote(id) {\n    setMessage((prevNote) => {\n      return prevNote.filter((message, index) => {\n        return index !== id;\n      })\n    })\n  }\n\n  \n\n//All I needed to do differently here was to reference the item in the object for title and content in order to render one note instead of two.\n  return (\n    <div>\n      <Header />\n      <CreateArea \n        onAdd={addNote}\n      />\n      <ul>\n        {message.map((keeperMessages, index) => \n      <Note \n        key={index} \n        id={index} \n        title={keeperMessages.title} \n        content={keeperMessages.content} \n        onChecked={deleteNote}\n        />\n        )}\n      </ul>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}